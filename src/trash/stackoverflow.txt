I would like to share with you a solution to a problem I have been faced to for hours. It does not come from me but from an other person (I put the link at the end). I just put the solution here to improve its visibility and making it avalaible on Stack Overflow.

My problem is to display a table with Reactjs (like an html table) and update its content (cell values) with the `setState` method. Here is the basic code (before I found the solution):

     var Cell = React.createClass({
      render: function () {
        return (<td>{this.props.cellValue}</td>);
          }
        });
        
     var Row = React.createClass({
      render: function () {
         return (<tr>{this.props.row}</tr>);
       }
      });
    
    var Table = React.createClass({
      getInitialState: function() {
        return {
          data: this.props.data
        };
      },
      render: function () {
        return (
          <table>
          {
            this.state.data.map(function(row) {
              var r = row.map(function(cell) {
                return <Cell cellValue={cell}/>;
              });
    
              return (<Row row={r}/>);
            })
          }
          </table>
         );
      }});
    
    var initialData = [[1,2,3],[4,5,6],[7,8,9]];
    var table = React.renderComponent(
      <Table data={initialData} />,
      document.getElementById('table')
    );

This is working most of the time. I can change the data by doing this (somewhere in a function or whatever):

    var newData = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]];
    table.setState({data : newData});

As you can see, it adds one row to the end of the table. However, if I try to set the initial data after this update (it should remove the last row):

    table.setState({data : initialData});

I add this error:

> TypeError: updatedChildren[j] is undefined
> updatedChildren[j].parentNode.removeChild(updatedChildren[j]);

Not very clear for me at first glence and I spent hours trying to figure it out. Actually, this was due to the fact that some browsers (tested with Firefox and Chrome) add automatically `<tbody>...</tbody>` tags to an html table that does not have them. Adding them in my Table component fix the issue:

    render: function () {
        return (
          <table><tbody>
          {
            ... same code as before ...
          }
          </tbody></table>
         );

If you look at the html code generated by React, you can notice it adds some data attributes (data-reactid) to all the html tags rendered by a React component (to more infos about data attribute in general: [go here](http://www.w3schools.com/tags/att_global_data.asp)). Since the `<tbody>...</tbody>` tags was not from a React component, they did not have any data-reactid and these attributes help React to track DOM nodes. 

Anyway, thank you to these people who talked about this issue. Here the link [https://groups.google.com/forum/#!topic/reactjs/NLs-PdrdDMA](https://groups.google.com/forum/#!topic/reactjs/NLs-PdrdDMA).  


More about data-reactid: [https://groups.google.com/forum/#!topic/reactjs/ewTN-WOP1w8](https://groups.google.com/forum/#!topic/reactjs/ewTN-WOP1w8).




